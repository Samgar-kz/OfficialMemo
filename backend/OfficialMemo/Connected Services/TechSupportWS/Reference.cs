//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechSupportWS
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://atfbank.kz/ABPROCSYSTEM/TechSupport/", ConfigurationName="TechSupportWS.TechSupportSoap")]
    public interface TechSupportSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/TestConnection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> TestConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListAsync(int listSize, string statusSet, string inclProcCodeSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessListForPeriod", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListForPeriodAsync(System.DateTime fromDate, System.DateTime toDate, int listSize, string statusSet, string inclProcCodeSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessListForProcessID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListForProcessIDAsync(string ProcessID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessListForRegNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListForRegNumAsync(string RegNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessWithoutMessagesList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessWithoutMessagesListAsync(int listSize, string inclProcCodeSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessListForStartDateTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListForStartDateTimeAsync(string startdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/UpdateProcessXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateProcessXmlAsync(string processGuid, System.Xml.XmlNode processXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/UpdateProcessStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateProcessStatusAsync(string processGuid, string processStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/UpdateProcessRunningFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateProcessRunningFlagAsync(string processGuid, bool isRunning);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/ClearProcessFinishDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task ClearProcessFinishDateAsync(string processGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessSteps", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessStepsAsync(string processGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetStepProcessMeta", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetStepProcessMetaAsync(string processGuid, int nStepNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetStepProcessXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetStepProcessXmlAsync(string processGuid, int nStepNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetMessageHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetMessageHistoryAsync(string processGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetMessageHistoryMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetMessageHistoryMessageAsync(string messageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetMessageHistoryReply", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetMessageHistoryReplyAsync(string messageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetMessageList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetMessageListAsync(string processGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessMessageAsync(string messageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/UpdateRequestExecutorCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateRequestExecutorCodeAsync(string requestGuid, string executorCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/UpdateProcessMessageXml", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task UpdateProcessMessageXmlAsync(string messageGuid, System.Xml.XmlNode messageXml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/DeleteProcessMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task DeleteProcessMessageAsync(string messageGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessDocumentAsync(string ProcessGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessCodeList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessCodeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetProcessDefinition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessDefinitionAsync(string processCode, double processVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/CheckRunningBlocksToStart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckRunningBlocksToStartAsync(string ProcessGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/ChangeProcessInitiator", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task ChangeProcessInitiatorAsync(string processGuid, string UserCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/GetMessageUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetMessageUserAsync(string requestGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://atfbank.kz/ABPROCSYSTEM/TechSupport/AddToQueueRetry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task AddToQueueRetryAsync(System.Xml.XmlNode doc);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface TechSupportSoapChannel : TechSupportWS.TechSupportSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class TechSupportSoapClient : System.ServiceModel.ClientBase<TechSupportWS.TechSupportSoap>, TechSupportWS.TechSupportSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TechSupportSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(TechSupportSoapClient.GetBindingForEndpoint(endpointConfiguration), TechSupportSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TechSupportSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TechSupportSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TechSupportSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TechSupportSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TechSupportSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> TestConnectionAsync()
        {
            return base.Channel.TestConnectionAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListAsync(int listSize, string statusSet, string inclProcCodeSet)
        {
            return base.Channel.GetProcessListAsync(listSize, statusSet, inclProcCodeSet);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListForPeriodAsync(System.DateTime fromDate, System.DateTime toDate, int listSize, string statusSet, string inclProcCodeSet)
        {
            return base.Channel.GetProcessListForPeriodAsync(fromDate, toDate, listSize, statusSet, inclProcCodeSet);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListForProcessIDAsync(string ProcessID)
        {
            return base.Channel.GetProcessListForProcessIDAsync(ProcessID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListForRegNumAsync(string RegNumber)
        {
            return base.Channel.GetProcessListForRegNumAsync(RegNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessWithoutMessagesListAsync(int listSize, string inclProcCodeSet)
        {
            return base.Channel.GetProcessWithoutMessagesListAsync(listSize, inclProcCodeSet);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessListForStartDateTimeAsync(string startdate)
        {
            return base.Channel.GetProcessListForStartDateTimeAsync(startdate);
        }
        
        public System.Threading.Tasks.Task UpdateProcessXmlAsync(string processGuid, System.Xml.XmlNode processXml)
        {
            return base.Channel.UpdateProcessXmlAsync(processGuid, processXml);
        }
        
        public System.Threading.Tasks.Task UpdateProcessStatusAsync(string processGuid, string processStatus)
        {
            return base.Channel.UpdateProcessStatusAsync(processGuid, processStatus);
        }
        
        public System.Threading.Tasks.Task UpdateProcessRunningFlagAsync(string processGuid, bool isRunning)
        {
            return base.Channel.UpdateProcessRunningFlagAsync(processGuid, isRunning);
        }
        
        public System.Threading.Tasks.Task ClearProcessFinishDateAsync(string processGuid)
        {
            return base.Channel.ClearProcessFinishDateAsync(processGuid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessStepsAsync(string processGuid)
        {
            return base.Channel.GetProcessStepsAsync(processGuid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetStepProcessMetaAsync(string processGuid, int nStepNumber)
        {
            return base.Channel.GetStepProcessMetaAsync(processGuid, nStepNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetStepProcessXmlAsync(string processGuid, int nStepNumber)
        {
            return base.Channel.GetStepProcessXmlAsync(processGuid, nStepNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetMessageHistoryAsync(string processGuid)
        {
            return base.Channel.GetMessageHistoryAsync(processGuid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetMessageHistoryMessageAsync(string messageGuid)
        {
            return base.Channel.GetMessageHistoryMessageAsync(messageGuid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetMessageHistoryReplyAsync(string messageGuid)
        {
            return base.Channel.GetMessageHistoryReplyAsync(messageGuid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetMessageListAsync(string processGuid)
        {
            return base.Channel.GetMessageListAsync(processGuid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessMessageAsync(string messageGuid)
        {
            return base.Channel.GetProcessMessageAsync(messageGuid);
        }
        
        public System.Threading.Tasks.Task UpdateRequestExecutorCodeAsync(string requestGuid, string executorCode)
        {
            return base.Channel.UpdateRequestExecutorCodeAsync(requestGuid, executorCode);
        }
        
        public System.Threading.Tasks.Task UpdateProcessMessageXmlAsync(string messageGuid, System.Xml.XmlNode messageXml)
        {
            return base.Channel.UpdateProcessMessageXmlAsync(messageGuid, messageXml);
        }
        
        public System.Threading.Tasks.Task DeleteProcessMessageAsync(string messageGuid)
        {
            return base.Channel.DeleteProcessMessageAsync(messageGuid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessDocumentAsync(string ProcessGuid)
        {
            return base.Channel.GetProcessDocumentAsync(ProcessGuid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessCodeListAsync()
        {
            return base.Channel.GetProcessCodeListAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetProcessDefinitionAsync(string processCode, double processVersion)
        {
            return base.Channel.GetProcessDefinitionAsync(processCode, processVersion);
        }
        
        public System.Threading.Tasks.Task<string> CheckRunningBlocksToStartAsync(string ProcessGuid)
        {
            return base.Channel.CheckRunningBlocksToStartAsync(ProcessGuid);
        }
        
        public System.Threading.Tasks.Task ChangeProcessInitiatorAsync(string processGuid, string UserCode)
        {
            return base.Channel.ChangeProcessInitiatorAsync(processGuid, UserCode);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageUserAsync(string requestGuid)
        {
            return base.Channel.GetMessageUserAsync(requestGuid);
        }
        
        public System.Threading.Tasks.Task AddToQueueRetryAsync(System.Xml.XmlNode doc)
        {
            return base.Channel.AddToQueueRetryAsync(doc);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TechSupportSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.TechSupportSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TechSupportSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://bpm2d/ABPS_TechSupport/TechSupport.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.TechSupportSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://bpm2d/ABPS_TechSupport/TechSupport.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            TechSupportSoap,
            
            TechSupportSoap12,
        }
    }
}
